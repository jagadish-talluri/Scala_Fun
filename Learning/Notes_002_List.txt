# List - Synopsis
# Same Type allowed, Immutable, 

# List - create, lisp style, "Nil" is case sensitive keyword, Nil keyword is manadatory as per LISP style
# :: is cons syntax, head :: tail, head => first element; tail => all other elements
> val x = 1 :: 2 :: 3 :: 4 :: Nil

# List - create, java style, var or val any thing is fine
> val x = List(1,2,3,4)

# List - create, mix type, rare use
> val x = List[Number](1, 2.0, 3d, 0x1)

# List - create, range method, useful
# store from 1 to 10
> val x = List.range(1, 10)

# store every 3 element from 1 to 10 ; excludes 10
> val x = List.range(1, 10, 3)

# List - create, fill method, useful, repeats the values and fills the list
> val x = List.fill(3)("foo")

# List - create, tabulate method, useful, send a function to fill, 5 => elements in index; n => index element value
> val x = List.tabulate(5)(n => n+1)

# remember, in both java and scala, index starts with 0
> val x = List.tabulate(7)(n => n*n)

## Operations on List
# List - prepend
> val x = List(1,2,3)
> val y = 0 :: x

# List - append or merge, use ::: to concat
> val a = List(1, 2, 3)
> val b = List(4, 5, 6)
> val c = a ::: b
> val d = List.concat(a,b)

# List - iteration with foreach
> val x = List(1, 2, 3)
> x.foreach {println}
> x.foreach {print}

# List - iteration with simplified for loop, for every 'a' in 'x' do the print
> val x = List(1, 2, 3)
> for(a <- x) println(a)

# we can do some tricks here, loop runs x elements times doing the println (prints nothing)
> for(a <- x) println

# loop runs , we can do simple arithmetic in the println statement
> for (a <- x) println(a+1)

# _ underscore is place holder for argument, sum all the elements in the list, without extra variable
> x.foreach { sum += _}

# use for loop, add all elements, use extra variable, cant use underscore in expanded function
> for( a <- x ) sum += a

# add condition to the for loop
> for( a <- x if a%2 == 0 ) println(a)

# apply filter method, one variable, returns List
> x.filter( a => a%2 == 0 )

# takeWhile - method, only lessthan '<' is working; '>' is not working; may be first element not supposed to be null
> val x = List.range(1, 10)
> val y = x.takeWhile( a => a < 4 )

# '>' symbol is making me nuts, has something unknown behind it

# dropWhile - method, stores the opposite of takeWhile
> val y = x.dropWhile( a => a < 4)

# partiton - method, stores 2 predicates one for true validaton other for false validation, very useful
> val y =  x.partition( a => a < 4 )

# find - method, rare use, returns the first found element
> val y = x.find( a => a < 4)

# span vs parition, didn't get it
scala> val y = x.span( a => a < 4 )                                                                                                                                             
y: (List[Int], List[Int]) = (List(1, 2, 3),List(4, 5, 6, 7, 8, 9))                                                                                                              

scala> val y = x.partition( a => a < 4)                                                                                                                                         
y: (List[Int], List[Int]) = (List(1, 2, 3),List(4, 5, 6, 7, 8, 9))                                                                                                              

scala> val y = x.span( a => a > 4 )                                                                                                                                             
y: (List[Int], List[Int]) = (List(),List(1, 2, 3, 4, 5, 6, 7, 8, 9))                                                                                                            

scala> val y = x.partition( a => a > 4 )                                                                                                                                        
y: (List[Int], List[Int]) = (List(5, 6, 7, 8, 9),List(1, 2, 3, 4))                                                                                                              

# List - map, with a variable, from 1 to 20, every 3 number like 1,2
> val x = List.range(1, 20, 3)
> val y = x.map( a => a * 2)

# List - map, without a variable, first underscore will be first parameter, no need of a fake variable
> val y = x.map(_*20)
> val y = x.map(_+20)

# List -map, with strings
scala> val names = List("upendra", "jyothi", "yogitha")                                                                                                                         
names: List[String] = List(upendra, jyothi, yogitha)                                                                                                                            

scala> names.map(_.toLowerCase())                                                                                                                                               
res5: List[String] = List(upendra, jyothi, yogitha)                                                                                                                             

scala> names.map(_.toUpperCase())                                                                                                                                               
res6: List[String] = List(UPENDRA, JYOTHI, YOGITHA) 

scala> names.map(a => <html>a</html>)                                                                                                                                           
res7: List[scala.xml.Elem] = List(<html>a</html>, <html>a</html>, <html>a</html>)                                                                                               
                                                                                                                                                                                
scala> names.map(a => <html>{a}</html>)                                                                                                                                         
res8: List[scala.xml.Elem] = List(<html>upendra</html>, <html>jyothi</html>, <html>yogitha</html>)                                                                              

# List - reverse
> x.reverse()

# List - reduceLeft
> x.reduceLeft(_+_)
> x.reduceLeft(_*_)

# List - foldLeft, has currying, r is accumilator, c is next value, 0 is initial value
> val x = List.range(1, 20)
> x.foldLeft(0)((r,c) => r+c)

# List - foldLeft, shortcut
> x.foldLeft(0)(_+_)

# List - foldLeft, for multiplicaton, 1 is initial value
> x.foldLeft(1)(_*_)

# List - foldLeft, for COUNT, 0 is initial value, c is 1
scala> y.foldLeft(0)((sum,c) => sum + 1)                                                                                                 res32: Int = 19                                                                                                                         

# underscore tell to discard this param
scala> y.foldLeft(0)((sum,_) => sum + 1)                                                                                                 res33: Int = 19    
